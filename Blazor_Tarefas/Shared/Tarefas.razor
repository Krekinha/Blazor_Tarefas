@inject IJSRuntime js


<h1>@Titulo</h1>



<table class="table">
    <thead>
        <tr>
            <th>Ação</th>
            <th>Data</th>
            <th>Descrição</th>
            <th>Concluida</th>
        </tr>
    </thead>
    <tbody>
        <ListaGenerica ListaItem="tarefas">
            <Lista Context="tarefa">
                <tr>
                    <TarefaIndividual item="tarefa" RemoverTarefa="RemoveTarefa" />
                </tr>
            </Lista>
        </ListaGenerica>
    </tbody>
</table>

@if (tarefas != null)
{
    <div class="form-group">
        <label>Tarefa</label>
        <input type="text" placeholder="Informe a tarefa" @bind="novaTarefa" />
        <button class="btn btn-primary" @onclick="AdicionarNovaTarefa">Registrar tarefa</button>
    </div>
}



@code{

    [Parameter]
    public List<Tarefa> tarefas { get; set; }

    [Parameter]
    public string Titulo { get; set; }

    private string novaTarefa = "";
    static int totalTarefas = 0;


    async void AdicionarNovaTarefa()
    {
        if (!string.IsNullOrWhiteSpace(novaTarefa))
        {
            tarefas.Add(new Tarefa
            {
                DataCriacao = DateTime.Now,
                Descricao = novaTarefa,
                ID = Guid.NewGuid()
            });
            novaTarefa = "";
            totalTarefas = tarefas.Count();

            await js.InvokeVoidAsync("getTotalTarefas");
        }
    }

    private async Task RemoveTarefa(Tarefa tarefa)
    {
        //tarefas.Remove(tarefas.First(x => x.ID == tarefa.ID));

        var resultado = await js.InvokeAsync<bool>("confirm", "Excluir Tarefa?");

        if (resultado)
        {
            tarefas.Remove(tarefa);
            //await js.InvokeVoidAsync("alert", "Tarefa excluida com sucesso");
            await js.InvokeAsync<object>("MostraAlerta", "Ok, tarefa excluida");
        }

    }

    [JSInvokable]
    public static Task<int> obterTotalTarefas()
    {
        return Task.FromResult(totalTarefas);
    }
}
